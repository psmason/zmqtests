// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysvcmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mysvcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* MySvcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MySvcMessage_reflection_ = NULL;
struct MySvcMessageOneofInstance {
  const ::tutorial::TestRequest* testrequest_;
  const ::tutorial::TestResponse* testresponse_;
}* MySvcMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mysvcmessages_2eproto() {
  protobuf_AddDesc_mysvcmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mysvcmessages.proto");
  GOOGLE_CHECK(file != NULL);
  MySvcMessage_descriptor_ = file->message_type(0);
  static const int MySvcMessage_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MySvcMessage_default_oneof_instance_, testrequest_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MySvcMessage_default_oneof_instance_, testresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySvcMessage, types_),
  };
  MySvcMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MySvcMessage_descriptor_,
      MySvcMessage::default_instance_,
      MySvcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySvcMessage, _has_bits_[0]),
      -1,
      -1,
      MySvcMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySvcMessage, _oneof_case_[0]),
      sizeof(MySvcMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MySvcMessage, _internal_metadata_),
      -1);
  TestRequest_descriptor_ = file->message_type(1);
  static const int TestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, msg_),
  };
  TestRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestRequest_descriptor_,
      TestRequest::default_instance_,
      TestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _internal_metadata_),
      -1);
  TestResponse_descriptor_ = file->message_type(2);
  static const int TestResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, msg_),
  };
  TestResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestResponse_descriptor_,
      TestResponse::default_instance_,
      TestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mysvcmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MySvcMessage_descriptor_, &MySvcMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestRequest_descriptor_, &TestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestResponse_descriptor_, &TestResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mysvcmessages_2eproto() {
  delete MySvcMessage::default_instance_;
  delete MySvcMessage_default_oneof_instance_;
  delete MySvcMessage_reflection_;
  delete TestRequest::default_instance_;
  delete TestRequest_reflection_;
  delete TestResponse::default_instance_;
  delete TestResponse_reflection_;
}

void protobuf_AddDesc_mysvcmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023mysvcmessages.proto\022\010tutorial\"u\n\014MySvc"
    "Message\022,\n\013testRequest\030\001 \001(\0132\025.tutorial."
    "TestRequestH\000\022.\n\014testResponse\030\002 \001(\0132\026.tu"
    "torial.TestResponseH\000B\007\n\005types\"\032\n\013TestRe"
    "quest\022\013\n\003msg\030\001 \002(\t\"\033\n\014TestResponse\022\013\n\003ms"
    "g\030\001 \002(\t", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mysvcmessages.proto", &protobuf_RegisterTypes);
  MySvcMessage::default_instance_ = new MySvcMessage();
  MySvcMessage_default_oneof_instance_ = new MySvcMessageOneofInstance();
  TestRequest::default_instance_ = new TestRequest();
  TestResponse::default_instance_ = new TestResponse();
  MySvcMessage::default_instance_->InitAsDefaultInstance();
  TestRequest::default_instance_->InitAsDefaultInstance();
  TestResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mysvcmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mysvcmessages_2eproto {
  StaticDescriptorInitializer_mysvcmessages_2eproto() {
    protobuf_AddDesc_mysvcmessages_2eproto();
  }
} static_descriptor_initializer_mysvcmessages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MySvcMessage::kTestRequestFieldNumber;
const int MySvcMessage::kTestResponseFieldNumber;
#endif  // !_MSC_VER

MySvcMessage::MySvcMessage()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.MySvcMessage)
}

void MySvcMessage::InitAsDefaultInstance() {
  MySvcMessage_default_oneof_instance_->testrequest_ = const_cast< ::tutorial::TestRequest*>(&::tutorial::TestRequest::default_instance());
  MySvcMessage_default_oneof_instance_->testresponse_ = const_cast< ::tutorial::TestResponse*>(&::tutorial::TestResponse::default_instance());
}

MySvcMessage::MySvcMessage(const MySvcMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.MySvcMessage)
}

void MySvcMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_types();
}

MySvcMessage::~MySvcMessage() {
  // @@protoc_insertion_point(destructor:tutorial.MySvcMessage)
  SharedDtor();
}

void MySvcMessage::SharedDtor() {
  if (has_types()) {
    clear_types();
  }
  if (this != default_instance_) {
  }
}

void MySvcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MySvcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MySvcMessage_descriptor_;
}

const MySvcMessage& MySvcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysvcmessages_2eproto();
  return *default_instance_;
}

MySvcMessage* MySvcMessage::default_instance_ = NULL;

MySvcMessage* MySvcMessage::New(::google::protobuf::Arena* arena) const {
  MySvcMessage* n = new MySvcMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MySvcMessage::clear_types() {
  switch(types_case()) {
    case kTestRequest: {
      delete types_.testrequest_;
      break;
    }
    case kTestResponse: {
      delete types_.testresponse_;
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPES_NOT_SET;
}


void MySvcMessage::Clear() {
  clear_types();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MySvcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.MySvcMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tutorial.TestRequest testRequest = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_testResponse;
        break;
      }

      // optional .tutorial.TestResponse testResponse = 2;
      case 2: {
        if (tag == 18) {
         parse_testResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.MySvcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.MySvcMessage)
  return false;
#undef DO_
}

void MySvcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.MySvcMessage)
  // optional .tutorial.TestRequest testRequest = 1;
  if (has_testrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *types_.testrequest_, output);
  }

  // optional .tutorial.TestResponse testResponse = 2;
  if (has_testresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *types_.testresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.MySvcMessage)
}

::google::protobuf::uint8* MySvcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.MySvcMessage)
  // optional .tutorial.TestRequest testRequest = 1;
  if (has_testrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *types_.testrequest_, target);
  }

  // optional .tutorial.TestResponse testResponse = 2;
  if (has_testresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *types_.testresponse_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.MySvcMessage)
  return target;
}

int MySvcMessage::ByteSize() const {
  int total_size = 0;

  switch (types_case()) {
    // optional .tutorial.TestRequest testRequest = 1;
    case kTestRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.testrequest_);
      break;
    }
    // optional .tutorial.TestResponse testResponse = 2;
    case kTestResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *types_.testresponse_);
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MySvcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MySvcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MySvcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MySvcMessage::MergeFrom(const MySvcMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.types_case()) {
    case kTestRequest: {
      mutable_testrequest()->::tutorial::TestRequest::MergeFrom(from.testrequest());
      break;
    }
    case kTestResponse: {
      mutable_testresponse()->::tutorial::TestResponse::MergeFrom(from.testresponse());
      break;
    }
    case TYPES_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MySvcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MySvcMessage::CopyFrom(const MySvcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MySvcMessage::IsInitialized() const {

  if (has_testrequest()) {
    if (!this->testrequest().IsInitialized()) return false;
  }
  if (has_testresponse()) {
    if (!this->testresponse().IsInitialized()) return false;
  }
  return true;
}

void MySvcMessage::Swap(MySvcMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MySvcMessage::InternalSwap(MySvcMessage* other) {
  std::swap(types_, other->types_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MySvcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MySvcMessage_descriptor_;
  metadata.reflection = MySvcMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

TestRequest::TestRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.TestRequest)
}

void TestRequest::InitAsDefaultInstance() {
}

TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.TestRequest)
}

void TestRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:tutorial.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestRequest_descriptor_;
}

const TestRequest& TestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysvcmessages_2eproto();
  return *default_instance_;
}

TestRequest* TestRequest::default_instance_ = NULL;

TestRequest* TestRequest::New(::google::protobuf::Arena* arena) const {
  TestRequest* n = new TestRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRequest::Clear() {
  if (has_msg()) {
    msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.TestRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.TestRequest.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.TestRequest)
  return false;
#undef DO_
}

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.TestRequest)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.TestRequest.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.TestRequest)
}

::google::protobuf::uint8* TestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TestRequest)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.TestRequest.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TestRequest)
  return target;
}

int TestRequest::ByteSize() const {
  int total_size = 0;

  // required string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestRequest_descriptor_;
  metadata.reflection = TestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

TestResponse::TestResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.TestResponse)
}

void TestResponse::InitAsDefaultInstance() {
}

TestResponse::TestResponse(const TestResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.TestResponse)
}

void TestResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:tutorial.TestResponse)
  SharedDtor();
}

void TestResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResponse_descriptor_;
}

const TestResponse& TestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mysvcmessages_2eproto();
  return *default_instance_;
}

TestResponse* TestResponse::default_instance_ = NULL;

TestResponse* TestResponse::New(::google::protobuf::Arena* arena) const {
  TestResponse* n = new TestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestResponse::Clear() {
  if (has_msg()) {
    msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.TestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.TestResponse.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.TestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.TestResponse)
  return false;
#undef DO_
}

void TestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.TestResponse)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.TestResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.TestResponse)
}

::google::protobuf::uint8* TestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.TestResponse)
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.TestResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.TestResponse)
  return target;
}

int TestResponse::ByteSize() const {
  int total_size = 0;

  // required string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestResponse::MergeFrom(const TestResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResponse::CopyFrom(const TestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestResponse::Swap(TestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestResponse::InternalSwap(TestResponse* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestResponse_descriptor_;
  metadata.reflection = TestResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
